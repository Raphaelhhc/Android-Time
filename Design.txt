Time App
Architecture design

- Requirements
    - Functional requirements
        - World clock: Display current time for various global cities
        - Alarm: Set alarms to ring at specific times; support add, modify, delete operations
        - Stopwatch: Start, pause, reset; counts elapsed time from 0 seconds and record lap time
        - Timer: Set duration, start counting down, pause, and reset to the original duration
    - Non-functional requirements
        - Low Latency: Real-time display updates with minimal delay
- App Architecture
    - Diagram
        - Separate the four function with their MVVM architecture
        - Stopwatch and Timer logic managed within ViewModel for simplicity (no persistent data)
        """
        WorldClockUI <---> WorldClockViewModel <---> WorldClockService
        AlarmUI <---> AlarmViewModel <---> AlarmService
        StopwatchUI <---> StopwatchViewModel
        TimerUI <---> TimerViewModel
        """
    - Modules
        - UI (use Jetpack Compose)
            - WorldClockScreen
                - Display list of cities with their current time
                - Button to add a new city
            - AlarmScreen
                - Display existing alarms
                - Buttons for adding, modifying, and deleting alarms
            - StopwatchScreen
                - Display elapsed time
                - Buttons: Start, Pause, Reset, Lap
            - TimerScreen
                - Display countdown time
                - Buttons: Start, Pause, Reset
                - Set initial timer duration
        - ViewModel
            - WorldClockViewModel
                - Manages state: list of cities with current times
                - Handles adding cities
            - AlarmViewModel
                - Manages state: list of alarms
                - Handles add, modify, delete actions
            - StopwatchViewModel
                - Manages stopwatch time state
                - Handles start, pause, reset actions
            - TimerViewModel
                - Manages countdown timer state
                - Handles set, start, pause, reset actions
        - Service
            - WorldClockService
                - Provides accurate current time per selected city using appropriate timezone APIs
            - AlarmService
                - Stores alarms persistently
                - Manages alarm lifecycle (background scheduling, triggering at specified times)
    - Data Schema
        - CityAndTime
            - city: String
            - timezone: String
            - time: Flow<LocalTime>
        - Alarm
            - id: Int
            - time: LocalTime
            - enabled: Boolean
- Notes
    - Edge cases / error handling
        - Prevent adding duplicate cities to World Clock
        - Prevent setting duplicate alarms at identical times
        - Handle invalid time inputs